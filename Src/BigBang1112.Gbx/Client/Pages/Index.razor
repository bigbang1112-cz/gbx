@page "/"
@using BigBang1112.Gbx.Client.Services;
@using GBX.NET;
@using GbxToolAPI;
@using GbxToolAPI.Client;
@using MapViewerEngine.Shared;

@inject MapViewerEngine.MapViewerEngineHubConnection Hub
@inject IToolManager ToolManager
@inject IWorkflowManager WorkflowManager

<PageTitle>GBX WEB TOOLS by BigBang1112</PageTitle>

<div class="grid-container">
    <div class="grid-item">
        <ImportGbx />
        <InputText @bind-Value="SearchValue" @oninput="OnSearchInput" class="search-bar" placeholder="Search..."></InputText>
    </div>
    <div class="grid-item">
        <h2>Tools</h2>
        <div class="list">
            @foreach (var item in ToolManager.GetToolFactories(searchValue))
            {
                <div class="rectangle clickable" @onclick="() => TestInstantiateTool(item)">
                    <h3>@item.Name</h3>
                    @if (!string.IsNullOrWhiteSpace(item.Description))
                    {
                        <p>@item.Description</p>
                    }
                </div>
            }
        </div>
    </div>
    <div class="grid-item">
        <h2>Workflows <span title="Workflow is a combination of tools with adjusted input and output.">(?)</span></h2>
        <div class="list">
            @foreach (var item in WorkflowManager.GetWorkflows(searchValue))
            {
                <div class="rectangle clickable">
                    <h3>@item.Name</h3>
                    @if (!string.IsNullOrWhiteSpace(item.Description))
                    {
                        <p>@item.Description</p>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!--<p>@Hub.State</p>

<AuthorizeView>
    <NotAuthorized>
        <a href="login">Login</a>
    </NotAuthorized>
    <Authorized>
        <a href="logout">Logout</a>
    </Authorized>
</AuthorizeView>

<a href="superadmin">SuperAdmin</a>



<InputFile OnChange="LoadFiles" />

<button @onclick="PingAsync">Send important stuff</button>

<p>@response</p>-->

@code {
    private string response = "";
    private Node? node;

    private string searchValue = "";

    public string SearchValue
    {
        get => searchValue;
        set
        {
            searchValue = value;
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchValue = e.Value?.ToString() ?? "";
    }

    protected override async Task OnInitializedAsync()
    {
        if (Hub.State == Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Disconnected)
        {
            await Hub.StartAsync();
        }

        Hub.Metas += (blocks) =>
        {
            response += string.Join(", ", blocks.Select(x => $"{x.Name} ({x.Meta.Length} bytes)"));
            StateHasChanged();
            return Task.CompletedTask;
        };

        Hub.BlockMesh += (block, data) =>
        {
            response += string.Join(", ", $"{block.Name} (ground: {block.Ground}, Variant: {block.Variant}, SubVariant: {block.SubVariant}, Data: {data.Length})");
            StateHasChanged();
            return Task.CompletedTask;
        };

        await WorkflowManager.LoadWorkflowsAsync();
    }

    private async Task PingAsync()
    {
        await Hub.SendMetasAsync(new[] { "StadiumAirship", "StadiumBump1" }, "Stadium", "Nadeo");
        await Hub.SendBlockMeshAsync(new BlockVariant("StadiumRoadMain", true, 0, 0));
        await Hub.SendBlockMeshAsync(new BlockVariant("StadiumRoadMain", true, 1, 0));
        await Hub.SendBlockMeshAsync(new BlockVariant("StadiumRoadMain", false, 2, 0));
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var ms = new MemoryStream();
            using var stream = file.OpenReadStream(maxAllowedSize: 10000000);

            await stream.CopyToAsync(ms);

            ms.Position = 0;

            node = GameBox.ParseNode(ms);
        }
    }

    public async Task TestInstantiateTool(IToolFactory factory)
    {
        var tool = factory.CreateTool(node);
        var type = tool.GetType();

        var hubConnectionInterface = type.GetInterfaces().FirstOrDefault(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(IHubConnection<>));

        if (hubConnectionInterface is not null)
        {
            hubConnectionInterface.GetProperty("HubConnection")?.SetValue(tool, Hub);
        }

        if (tool is IHasUI ui)
        {
            await ui.LoadAsync();
        }
    }
}