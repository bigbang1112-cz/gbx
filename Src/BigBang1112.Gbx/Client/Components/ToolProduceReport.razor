@using GBX.NET;
@using GbxToolAPI;
@using System.IO.Compression;
@using System.Text.Json;

@inject IGbxService GbxService
@inject IDownloadService DownloadService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@if (ToolFactory is null)
{
    return;
}

<h2>@ToolFactory.Name</h2>

<div class="progress-container">
    <div class="menu">
        <div class="rectangle">
            <div class="button-overview @(SelectedToolInstance is null ? "selected" : "") @(AutomationDone ? "enabled" : "")" @onclick="() => SelectedToolInstance = null">Overview</div>
        </div>
        <div class="rectangle list">
            @foreach (var toolInstance in ToolInstances)
            {
                <div class="@(SelectedToolInstance == toolInstance ? "selected" : "") @(AutomationDone ? "enabled" : "")" @onclick="() => SelectedToolInstance = toolInstance">
                    @if (toolInstance.Output is not null)
                    {
                        if(toolInstance.Files.Count == 0)
                        {
                            <span>No file produced</span>
                        }
                        else
                        {
                            <span>@toolInstance.Files[0].ShortFileName</span>

                            if (toolInstance.Files.Count > 1)
                            {
                                <span> (+ @(toolInstance.Files.Count - 1) more)</span>
                            }
                        }
                    }
                    else
                    {
                        <span>Producing...</span>
                    }
                </div>
            }
        </div>
    </div>

    @if (SelectedToolInstance is null)
    {
        var fileCount = ToolInstances.SelectMany(x => x.Files).Count();

        <div class="rectangle report overview">
            <h3>Produced @fileCount @(fileCount == 1 ? "file" : "files")</h3>
            <div class="overview-buttons">
                <button @onclick="DownloadWithFolders" title="Downloads all outputs as a zip that you can just extract into your user data folder (MyDocuments/[game]).">
                    Download with folders
                </button>
                <button @onclick="DownloadOnlyOutputs" title="Downloads all output files without any folder structuring (if there are multiple, they will be packed into zip).">
                    Download only outputs
                </button>
                <button @onclick="SaveIntoMemory" title="Saves all outputs in memory for the next use in Gbx Web Tools.">
                    Save into memory
                </button>

                @if (ToolFactory.HasAssets)
                {
                    @if (ProducedManiaPlanetFiles)
                    {
                        <a href="assets/tools/@ToolFactory.Route?game=mp" class="button" title="Downloads tool assets that you can just extract into your user data folder (MyDocuments/[game]).">
                            Download assets for ManiaPlanet
                        </a>
                    }

                    @if (ProducedNonManiaPlanetFiles)
                    {
                        <a href="assets/tools/@ToolFactory.Route?game=tmf" class="button" title="Downloads tool assets that you can just extract into your user data folder (MyDocuments/[game]).">
                            Download assets for TMF
                        </a>
                    }

                }

            </div>
        </div>
    }
    else
    {
        <div class="rectangle report">
            <div class="log">
                @foreach (var msg in SelectedToolInstance.Log)
                {
                    <div>@msg</div>
                }
            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    [EditorRequired]
    public IToolFactory? ToolFactory { get; set; }

    [Parameter]
    [EditorRequired]
    public HashSet<GbxModel> GbxSelection { get; set; } = new();

    public ToolInstanceModel? SelectedToolInstance { get; set; }

    public List<ToolInstanceModel> ToolInstances { get; set; } = new();

    public bool AutomationDone { get; set; }

    public bool ProducedManiaPlanetFiles { get; set; }
    public bool ProducedNonManiaPlanetFiles { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (ToolFactory is null)
        {
            return;
        }

        var route = ToolFactory.Route;

        // Config retrieval from local storage
        var config = default(Config);
        var configs = await LocalStorage.GetItemAsync<Dictionary<string, JsonDocument>>($"Tool:{route}:Config");

        if (ToolFactory.ConfigType is not null && configs is not null && configs.Count > 0)
        {
            var selectedConfigName = await LocalStorage.GetItemAsync<string>($"Tool:{route}:Config:Selected");

            if (string.IsNullOrWhiteSpace(selectedConfigName))
            {
                selectedConfigName = "Default";
            }

            config = (Config)JsonSerializer.Deserialize(configs[selectedConfigName], ToolFactory.ConfigType, Json.DefaultOptions)!;
        }
        //

        foreach (var tool in ToolFactory.CreateTools(GbxSelection))
        {
            if (tool is FailedToolModel failedTool)
            {
                continue;
            }

            // Sets custom config if available
            if (ToolFactory.ConfigType is not null && config is not null)
            {
                ToolFactory.ToolType.GetProperty("Config", ToolFactory.ConfigType)!.SetValue(tool, config);
            }

            SelectedToolInstance = new ToolInstanceModel(tool);
            ToolInstances.Add(SelectedToolInstance);

            if (tool is IHasAssets toolWithAssets)
            {
                SelectedToolInstance.Log.Add("Loading assets...");
                StateHasChanged();

                await toolWithAssets.LoadAssetsAsync();
            }

            foreach (var produceMethod in ToolFactory.ProduceMethods)
            {
                SelectedToolInstance.Log.Add("Producing...");
                StateHasChanged();
                await Task.Delay(20);

                try
                {
                    var output = produceMethod.Invoke(tool, null);

                    if (output is null)
                    {
                        continue;
                    }

                    SelectedToolInstance.Output = output;

                    if (SelectedToolInstance.Output is System.Collections.IEnumerable enumerable)
                    {
                        foreach (var item in enumerable)
                        {
                            var file = new ToolInstanceFileModel()
                            {
                                FileName = GetToolOutputFileName(item),
                                IsForManiaPlanet = IsOutputForManiaPlanet(item)
                            };

                            SelectedToolInstance.Files.Add(file);
                            SelectedToolInstance.Log.Add($"Produced {file.ShortFileName}!");
                        }
                    }
                    else
                    {
                        var singleFile = new ToolInstanceFileModel()
                        {
                            FileName = GetToolOutputFileName(output),
                            IsForManiaPlanet = IsOutputForManiaPlanet(output)
                        };

                        SelectedToolInstance.Files.Add(singleFile);
                        SelectedToolInstance.Log.Add($"Produced {singleFile.ShortFileName}!");
                    }

                }
                catch (Exception ex)
                {
                    SelectedToolInstance.Log.Add("Error while producing:");
                    SelectedToolInstance.Log.Add(ex.ToString());
                }

                SelectedToolInstance.Log.Add("Production finished!");
                StateHasChanged();
                await Task.Delay(20);
            }
        }

        SelectedToolInstance = null;
        AutomationDone = true;
    }

    private string? GetToolOutputFileName(object output)
    {
        var type = output.GetType();

        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(NodeFile<>))
        {
            var fileName = type.GetProperty(nameof(NodeFile<Node>.FileName))?.GetValue(output)?.ToString();

            if (fileName is null)
            {
                return null;
            }

            return fileName;
        }

        if (output is BinFile binFile)
        {
            return binFile.FileName ?? Guid.NewGuid() + ".dat";
        }

        if (output is Node node)
        {
            return NodeManager.GetGbxExtensions(node.Id).FirstOrDefault() + ".Gbx";
        }

        return output?.ToString();
    }

    private bool IsOutputForManiaPlanet(object output)
    {
        var type = output.GetType();

        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(NodeFile<>))
        {
            var isManiaPlanet = (bool)(type.GetProperty(nameof(NodeFile<Node>.IsManiaPlanet))?.GetValue(output) ?? false);

            if (!ProducedManiaPlanetFiles)
            {
                ProducedManiaPlanetFiles = isManiaPlanet;
            }

            if (!ProducedNonManiaPlanetFiles)
            {
                ProducedNonManiaPlanetFiles = !isManiaPlanet;
            }

            return isManiaPlanet;
        }

        return true; // default should be rather true
    }

    private async Task DownloadWithFolders()
    {
        if (ToolInstances.Count == 0)
        {
            return;
        }

        using var ms = new MemoryStream();

        var zip = new ZipArchive(ms, ZipArchiveMode.Create, leaveOpen: true);

        var fileName = $"tool-output-{DateTime.Now:yyyy-MM-dd-HH-mm-ss}.zip";

        foreach (var toolInstance in ToolInstances)
        {
            if (toolInstance.Output is null)
            {
                continue;
            }

            var counter = 0;

            foreach (var item in toolInstance.Output as System.Collections.IEnumerable ?? Enumerable.Repeat(toolInstance.Output, 1))
            {
                var individualFileName = toolInstance.Files[counter].FileName;
                counter++; // be careful

                if (individualFileName is null)
                {
                    continue;
                }

                using var entryStream = zip.CreateEntry(individualFileName).Open();

                var itemType = item.GetType();

                if (itemType.IsGenericType && itemType.GetGenericTypeDefinition() == typeof(NodeFile<>))
                {
                    var node = (Node)(itemType.GetProperty(nameof(NodeFile<Node>.Node))?.GetValue(item) ?? throw new Exception("NodeFile.Node is null!"));
                    node.Save(entryStream); // IDRemap needs to be addressed
                }
                else if (item is Node node)
                {
                    node.Save(entryStream); // IDRemap needs to be addressed
                }
                else if (item is BinFile binFile)
                {
                    entryStream.Write(binFile.Data);
                }
            }
        }

        zip.Dispose();

        await DownloadService.DownloadAsync(fileName, ms.ToArray(), "application/zip");
    }

    private async Task DownloadOnlyOutputs()
    {
        if (ToolInstances.Count == 0)
        {
            return;
        }

        using var ms = new MemoryStream();

        var zipArchive = ToolInstances.Count == 1 ? null : new ZipArchive(ms, ZipArchiveMode.Create, leaveOpen: true);
        var fileName = $"tool-output-{DateTime.Now:yyyy-MM-dd-HH-mm-ss}.zip";

        foreach (var toolInstance in ToolInstances)
        {
            if (toolInstance.Output is null)
            {
                continue;
            }

            var counter = 0;

            foreach (var item in toolInstance.Output as System.Collections.IEnumerable ?? Enumerable.Repeat(toolInstance.Output, 1))
            {
                var shortFileName = toolInstance.Files[counter].ShortFileName;
                counter++; // be careful

                if (shortFileName is null)
                {
                    continue;
                }

                var itemType = item.GetType();

                if (itemType.IsGenericType && itemType.GetGenericTypeDefinition() == typeof(NodeFile<>))
                {
                    var node = (Node)(itemType.GetProperty(nameof(NodeFile<Node>.Node))?.GetValue(item) ?? throw new Exception("NodeFile.Node is null!"));

                    if (zipArchive is null)
                    {
                        node.Save(ms); // IDRemap needs to be addressed
                        fileName = shortFileName;
                    }
                    else
                    {
                        using var entryStream = zipArchive.CreateEntry(shortFileName).Open();
                        node.Save(entryStream); // IDRemap needs to be addressed
                    }
                }
                else if (item is Node node)
                {
                    if (zipArchive is null)
                    {
                        node.Save(ms); // IDRemap needs to be addressed
                        fileName = shortFileName;
                    }
                    else
                    {
                        using var entryStream = zipArchive.CreateEntry(shortFileName).Open();
                        node.Save(entryStream); // IDRemap needs to be addressed
                    }
                }
                else if (item is BinFile binFile)
                {
                    if (zipArchive is null)
                    {
                        ms.Write(binFile.Data);
                        fileName = shortFileName;
                    }
                    else
                    {
                        using var entryStream = zipArchive.CreateEntry(shortFileName).Open();
                        entryStream.Write(binFile.Data);
                    }
                }
            }
        }

        if (zipArchive is not null)
        {
            zipArchive.Dispose();
        }

        await DownloadService.DownloadAsync(fileName, ms.ToArray(), zipArchive is null ? "application/octet-stream" : "application/zip");
    }

    private void SaveIntoMemory()
    {
        foreach (var toolInstance in ToolInstances)
        {
            if (toolInstance.Output is null)
            {
                continue;
            }

            var counter = 0;

            foreach (var item in toolInstance.Output as System.Collections.IEnumerable ?? Enumerable.Repeat(toolInstance.Output, 1))
            {
                var shortFileName = toolInstance.Files[counter].ShortFileName;
                counter++; // be careful

                if (shortFileName is null)
                {
                    continue;
                }

                var itemType = item.GetType();

                if (itemType.IsGenericType && itemType.GetGenericTypeDefinition() == typeof(NodeFile<>))
                {
                    var node = (Node)(itemType.GetProperty(nameof(NodeFile<Node>.Node))?.GetValue(item) ?? throw new Exception("NodeFile.Node is null!"));

                    GbxService.Gbxs.Add(new GbxModel(shortFileName, node.ToGbx()));
                }
                else if (item is Node node)
                {
                    GbxService.Gbxs.Add(new GbxModel(shortFileName, node.ToGbx()));
                }
            }
        }
    }
}
