@using GBX.NET

@inject IJSRuntime JS
@inject SettingsService Settings
@inject IGbxService GbxService

<div class="import-area @(DraggedOver == true ? "hovered" : "")">
    <InputFile OnChange="@OnChangeAsync"
               @ondragenter="OnDragEnter"
               @ondragleave="OnDragLeave"
               @ondrop="OnDrop"
               id="file-input"
               class="file-input" multiple />
    <span>@ImportMessage</span>
</div>

@code {
    private const string ImportBaseMessage = "Import *.Gbx files here...";

    public string ImportMessage { get; set; } = ImportBaseMessage;
    public bool DraggedOver { get; set; }

    private async Task OnChangeAsync(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(Settings.MaxFileCountToUpload);

        await JS.InvokeVoidAsync("resetFileInput", "file-input");

        ImportMessage = $"Importing {files.Count} files...";
        StateHasChanged();

        if (files.Count == 0)
        {
            ImportMessage = ImportBaseMessage;
            return;
        }

        for (var i = 0; i < files.Count; i++)
        {
            var file = files[i];

            using var ms = new MemoryStream();
            using var stream = file.OpenReadStream(maxAllowedSize: Settings.MaxFileSizeToUpload);

            await stream.CopyToAsync(ms);

            ms.Position = 0;

            GbxService.TryImport(ms, out var gbx);

            ImportMessage = $"Importing {files.Count - i} files...";
            StateHasChanged();
        }

        ImportMessage = ImportBaseMessage;
    }

    private void OnDragEnter(DragEventArgs e)
    {
        DraggedOver = true;

        ImportMessage = e.DataTransfer.Items.Length == 1
            ? "1 file to be imported"
            : $"{e.DataTransfer.Items.Length} files to be imported";
    }

    private void OnDragLeave(DragEventArgs e)
    {
        DraggedOver = false;
        ImportMessage = ImportBaseMessage;
    }

    private void OnDrop(DragEventArgs e)
    {
        DraggedOver = false;
        ImportMessage = ImportBaseMessage;
    }
}
