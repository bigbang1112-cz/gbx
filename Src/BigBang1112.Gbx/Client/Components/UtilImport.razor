@using System.Collections.Specialized;
@using GbxToolAPI;
@using GbxToolAPI.Client.Models.UtilImport;
@using System.Reflection;
@using System.Text.Json;

@inject IGbxService GbxService
@inject NavigationManager NavMgr
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject Blazored.LocalStorage.ISyncLocalStorageService SyncLocalStorage

<h2>
    @Name @Version
</h2>

@ChildContent

<div class="import-section" style="padding-bottom: 30px">
            
    <div class="import-gbx">
        <ImportFile Height="280" />
    </div>
    <div>
        <LookingFor ImportTypes="ImportTypes" @ref="lookingFor"></LookingFor>
    </div>
    
    <FileSelection Produces="Produces"
                   GbxSelection="GbxSelection"
                   SelectionChanged="SelectionChanged"
                   ImportTypes="ImportTypes"
                   SingleSelection="@SingleSelection"
                   @ref="fileSelection"></FileSelection>

    <ToolConfig Route="@Route" Configs="Configs"></ToolConfig>
    
</div>

@code {
    private LookingFor? lookingFor;
    private FileSelection? fileSelection;

    [Parameter]
    [EditorRequired]
    public string? Name { get; set; }

    [Parameter]
    [EditorRequired]
    public string? Route { get; set; }

    [Parameter]
    public string? Version { get; set; }

    [Parameter]
    [EditorRequired]
    public bool SingleSelection { get; set; }

    [Parameter]
    public bool Produces { get; set; }

    [Parameter]
    [EditorRequired]
    public HashSet<GbxModel> GbxSelection { get; set; } = new();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    [EditorRequired]
    public Dictionary<string, Config> Configs { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public IEnumerable<UtilImportType> ImportTypes { get; set; } = Enumerable.Empty<UtilImportType>();

    protected override async Task OnInitializedAsync()
    {
        GbxService.Gbxs.CollectionChanged += Gbxs_CollectionChanged;
    }

    private void Gbxs_CollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        StateHasChanged();
    }

    private void SelectionChanged()
    {
        StateHasChanged(); // should maybe update only SOME components
    }
}
