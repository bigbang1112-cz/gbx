@using GBX.NET;
@using System.Collections.Specialized;

@inject IGbxService GbxService

@if (GbxService.Gbxs.Count > 0)
{
    <div class="rectangle floating-div" style="height: @(Expanded ? ExpandedHeight : ClosedHeight)px">
        <div class="top" @onclick="ExpandOrClose">
            <div class="top-text">@GbxService.Gbxs.Count @(GbxService.Gbxs.Count == 1 ? "file" : "files") stored</div>
            <img src="img/arrow-up.svg" width="24" class="arrow @(Expanded ? "expanded" : "")" />
        </div>
        <div class="panel" style="@(SelectedGbx is null ? "" : "gap: 5px;")">
            <div class="gbx-options" style="width: @(SelectedGbx is null ? "0" : "200")px">
                @if (SelectedGbx is not null)
                {
                    <span>nice</span>
                }
            </div>
            <div class="gbx-list">

                @foreach (var gbx in GbxService.Gbxs)
                {
                    <div class="@(SelectedGbx == gbx ? "selected" : "")" @onclick="() => SelectGbx(gbx)">
                        <div class="delete-gbx" @onclick="() => DeleteGbx(gbx)">
                            <img src="img/x.svg" />
                        </div>
                        <div class="gbx-name">
                            @gbx.FileName
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
}

@code {
    private const int ExpandedHeight = 300;
    private const int ClosedHeight = 50;

    public GbxModel? SelectedGbx { get; set; }

    public bool Expanded { get; set; }

    protected override void OnInitialized()
    {
        GbxService.Gbxs.CollectionChanged += Gbxs_CollectionChanged;
    }

    private void Gbxs_CollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        StateHasChanged();
    }

    private void ExpandOrClose()
    {
        Expanded = !Expanded;
    }

    private void SelectGbx(GbxModel gbx)
    {
        if (SelectedGbx == gbx)
        {
            SelectedGbx = null;
        }
        else
        {
            SelectedGbx = gbx;
        }
    }

    private void DeleteGbx(GbxModel gbx)
    {
        if (SelectedGbx == gbx)
        {
            SelectedGbx = null;
        }

        GbxService.Gbxs.Remove(gbx);
    }
}
